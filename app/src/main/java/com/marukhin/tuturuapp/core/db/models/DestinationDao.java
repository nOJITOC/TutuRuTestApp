package com.marukhin.tuturuapp.core.db.models;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DESTINATION".
*/
public class DestinationDao extends AbstractDao<Destination, Long> {

    public static final String TABLENAME = "DESTINATION";

    /**
     * Properties of entity Destination.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property State = new Property(1, Integer.class, "state", false, "STATE");
        public final static Property CityRemoteId = new Property(2, Long.class, "cityRemoteId", false, "CITY_REMOTE_ID");
    }

    private Query<Destination> city_DestinationQuery;

    public DestinationDao(DaoConfig config) {
        super(config);
    }
    
    public DestinationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DESTINATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"STATE\" INTEGER," + // 1: state
                "\"CITY_REMOTE_ID\" INTEGER);"); // 2: cityRemoteId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DESTINATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Destination entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(2, state);
        }
 
        Long cityRemoteId = entity.getCityRemoteId();
        if (cityRemoteId != null) {
            stmt.bindLong(3, cityRemoteId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Destination entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        Integer state = entity.getState();
        if (state != null) {
            stmt.bindLong(2, state);
        }
 
        Long cityRemoteId = entity.getCityRemoteId();
        if (cityRemoteId != null) {
            stmt.bindLong(3, cityRemoteId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Destination readEntity(Cursor cursor, int offset) {
        Destination entity = new Destination( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // state
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // cityRemoteId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Destination entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setState(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setCityRemoteId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Destination entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Destination entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Destination entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "destination" to-many relationship of City. */
    public List<Destination> _queryCity_Destination(Long cityRemoteId) {
        synchronized (this) {
            if (city_DestinationQuery == null) {
                QueryBuilder<Destination> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CityRemoteId.eq(null));
                city_DestinationQuery = queryBuilder.build();
            }
        }
        Query<Destination> query = city_DestinationQuery.forCurrentThread();
        query.setParameter(0, cityRemoteId);
        return query.list();
    }

}

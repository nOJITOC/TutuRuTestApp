package com.marukhin.tuturuapp.core.db.models;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STATION".
*/
public class StationDao extends AbstractDao<Station, Long> {

    public static final String TABLENAME = "STATION";

    /**
     * Properties of entity Station.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CountryTitle = new Property(1, String.class, "countryTitle", false, "COUNTRY_TITLE");
        public final static Property RegionTitle = new Property(2, String.class, "regionTitle", false, "REGION_TITLE");
        public final static Property CityTitle = new Property(3, String.class, "cityTitle", false, "CITY_TITLE");
        public final static Property CityRemoteId = new Property(4, Long.class, "cityRemoteId", false, "CITY_REMOTE_ID");
        public final static Property StationTitle = new Property(5, String.class, "stationTitle", false, "STATION_TITLE");
        public final static Property Longitude = new Property(6, Float.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(7, Float.class, "latitude", false, "LATITUDE");
    }

    private Query<Station> city_StationsQuery;

    public StationDao(DaoConfig config) {
        super(config);
    }
    
    public StationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"COUNTRY_TITLE\" TEXT," + // 1: countryTitle
                "\"REGION_TITLE\" TEXT," + // 2: regionTitle
                "\"CITY_TITLE\" TEXT," + // 3: cityTitle
                "\"CITY_REMOTE_ID\" INTEGER," + // 4: cityRemoteId
                "\"STATION_TITLE\" TEXT," + // 5: stationTitle
                "\"LONGITUDE\" REAL," + // 6: longitude
                "\"LATITUDE\" REAL);"); // 7: latitude
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Station entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String countryTitle = entity.getCountryTitle();
        if (countryTitle != null) {
            stmt.bindString(2, countryTitle);
        }
 
        String regionTitle = entity.getRegionTitle();
        if (regionTitle != null) {
            stmt.bindString(3, regionTitle);
        }
 
        String cityTitle = entity.getCityTitle();
        if (cityTitle != null) {
            stmt.bindString(4, cityTitle);
        }
 
        Long cityRemoteId = entity.getCityRemoteId();
        if (cityRemoteId != null) {
            stmt.bindLong(5, cityRemoteId);
        }
 
        String stationTitle = entity.getStationTitle();
        if (stationTitle != null) {
            stmt.bindString(6, stationTitle);
        }
 
        Float longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(7, longitude);
        }
 
        Float latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(8, latitude);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Station entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String countryTitle = entity.getCountryTitle();
        if (countryTitle != null) {
            stmt.bindString(2, countryTitle);
        }
 
        String regionTitle = entity.getRegionTitle();
        if (regionTitle != null) {
            stmt.bindString(3, regionTitle);
        }
 
        String cityTitle = entity.getCityTitle();
        if (cityTitle != null) {
            stmt.bindString(4, cityTitle);
        }
 
        Long cityRemoteId = entity.getCityRemoteId();
        if (cityRemoteId != null) {
            stmt.bindLong(5, cityRemoteId);
        }
 
        String stationTitle = entity.getStationTitle();
        if (stationTitle != null) {
            stmt.bindString(6, stationTitle);
        }
 
        Float longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(7, longitude);
        }
 
        Float latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(8, latitude);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Station readEntity(Cursor cursor, int offset) {
        Station entity = new Station( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // countryTitle
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // regionTitle
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cityTitle
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // cityRemoteId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // stationTitle
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // longitude
            cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7) // latitude
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Station entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCountryTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRegionTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCityTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCityRemoteId(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setStationTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLongitude(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setLatitude(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Station entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Station entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Station entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "stations" to-many relationship of City. */
    public List<Station> _queryCity_Stations(Long cityRemoteId) {
        synchronized (this) {
            if (city_StationsQuery == null) {
                QueryBuilder<Station> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.CityRemoteId.eq(null));
                city_StationsQuery = queryBuilder.build();
            }
        }
        Query<Station> query = city_StationsQuery.forCurrentThread();
        query.setParameter(0, cityRemoteId);
        return query.list();
    }

}
